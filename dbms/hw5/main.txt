

##############
section Данные
##############

data Students
    StudentId, StudentName       , GroupId
    1        , 'Иванов И.И.'     , 1      
    2        , 'Петров П.П.'     , 1      
    3        , 'Петров П.П.'     , 2      
    4        , 'Сидров С.С.'     , 2      
    5        , 'Неизвестный Н.Н.', 3      
    6        , 'Безымянный Б.Б'  , 4      
    9        , 'Пудж'            , 999      

data Groups
    GroupId, GroupName
    1      , 'M3435'  
    2      , 'M3439'  
    3      , 'M3238'  
    4      , 'M3239'  

data Courses
    CourseId, CourseName             
    1       , 'Базы данных'          
    2       , 'Управление проектами' 
    3       , 'ППО'                  
    4       , 'Теория информации'    
    6       , 'Математический анализ'
    7       , 'Технологии Java'      

data Lecturers
    LecturerId, LecturerName    
    1         , 'Корнеев Г.А.'  
    2         , 'Будин Н.А.'
    3         , 'Кузнецова Е.М.'
    4         , 'Киракозов А.Х.'
    6         , 'Трофимюк Г.А.' 
    7         , 'Беляев Е.А.' 
    8         , 'Кохась К.П.'   

data Plan
    GroupId, CourseId, LecturerId
    1      , 1       , 2         
    2      , 1       , 1         
    1      , 2       , 3         
    1      , 3       , 4         
    2      , 3       , 4         
    2      , 4       , 6         
    1      , 4       , 7         
    2      , 4       , 7         
    4      , 6       , 8         
    1      , 7       , 1         
    2      , 7       , 1         
    3      , 7       , 1         
    4      , 7       , 1         

data Marks
    StudentId, CourseId, Mark
    1        , 1       , 5   
    2        , 1       , 4   
    3        , 1       , 3   
    2        , 2       , 3   
    3        , 2       , 4   
    4        , 2       , 5   
    7        , 1       , 5   
    8        , 1       , 5   
    7        , 7       , 5   
    8        , 7       , 5   
    5        , 7       , 5   
    6        , 7       , 5   
    3        , 3       , 3   


#########################################################
section Составьте выражения реляционной алгебры и
        соответствующие SQL-запросы, позволяющие получать
#########################################################

#####################################
subsection 01. Информацию о студентах

comment 01.1.  С заданным идентификатором
               (StudentId, StudentName, GroupId по :StudentId)

set-var :StudentId = 1

print-ra proj{StudentId, StudentName, GroupId}(sigma{StudentId=:StudentId}(Students))

print-sql SELECT StudentId, StudentName, GroupId FROM Students WHERE StudentId=:StudentId;

comment 01.2.  С заданным ФИО
               (StudentId, StudentName, GroupId по :StudentName)

set-var :StudentName = 'Петров П.П.'

print-ra proj{StudentId, StudentName, GroupId}(sigma{StudentName=:StudentName}(Students))

print-sql SELECT StudentId, StudentName, GroupId FROM Students WHERE StudentName=:StudentName;

############################################
subsection 02. Полную информацию о студентах

comment 02.1.  С заданным идентификатором
               (StudentId, StudentName, GroupName по :StudentId)

set-var :StudentId = 1

print-ra proj{StudentId, StudentName, GroupName}(sigma{StudentId=:StudentId}(Students) natural-join Groups)

print-sql SELECT StudentId, StudentName, GroupName FROM Students natural join Groups WHERE StudentId=:StudentId;

comment 02.2.  С заданным ФИО
               (StudentId, StudentName, GroupName по :StudentName)

set-var :StudentName = 'Иванов И.И.'

print-ra proj{StudentId, StudentName, GroupName}(sigma{StudentName=:StudentName}(Students) natural-join Groups)

print-sql SELECT StudentId, StudentName, GroupName FROM Students natural join Groups WHERE StudentName=:StudentName;

######################################################################
subsection 03. Информацию о студентах с заданной оценкой по дисциплине

comment 03.1.  С заданным идентификатором
               (StudentId, StudentName, GroupId по :Mark, :CourseId)

set-var :Mark = 5

set-var :CourseId = 1

print-ra proj{StudentId, StudentName, GroupId}(Students natural-join sigma{CourseId=:CourseId && Mark=:Mark}(Marks))

print-sql
  SELECT StudentId, StudentName, GroupId
  FROM Students natural join Marks
  WHERE CourseId=:CourseId and Mark=:Mark;

comment 03.2.  С заданным названием
               (StudentId, StudentName, GroupId по :Mark, :CourseName)

set-var :Mark = 5

set-var :CourseName = 'Базы данных'

print-ra proj{StudentId, StudentName, GroupId}(Students natural-join sigma{Mark=:Mark}(Marks) natural-join sigma{CourseName=:CourseName}(Courses))

print-sql
  SELECT StudentId, StudentName, GroupId
  FROM Students natural join Marks natural join Courses
  WHERE CourseName=:CourseName and Mark=:Mark;

comment 03.3.  Которую у него вёл лектор заданный идентификатором
               (StudentId, StudentName, GroupId по :Mark, :LecturerId)

set-var :Mark = 5

set-var :LecturerId = 1

print-ra proj{StudentId, StudentName, GroupId}(sigma{Mark=:Mark}(Marks) nj sigma{LecturerId=:LecturerId}(Plan) nj Students)

print-sql
  SELECT StudentId, StudentName, GroupId
  FROM Students natural join Plan natural join Marks
  WHERE Mark=:Mark and LecturerId=:LecturerId;

comment 03.4.  Которую у него вёл лектор, заданный ФИО
               (StudentId, StudentName, GroupId по :Mark, :LecturerName)

set-var :Mark = 5

set-var :LecturerName = 'Корнеев Г.А.'

print-ra proj{StudentId, StudentName, GroupId}(sigma{LecturerName=:LecturerName}(Lecturers) nj Plan nj sigma{Mark=:Mark}(Marks) nj Students)

print-sql
  SELECT StudentId, StudentName, GroupId
  FROM Students natural join Plan natural join Marks natural join Lecturers
  WHERE Mark=:Mark and LecturerName=:LecturerName;

comment 03.5.  Которую вёл лектор, заданный идентификатором
               (StudentId, StudentName, GroupId по :Mark, :LecturerId)

set-var :Mark = 5

set-var :LecturerId = 1

print-ra proj{StudentId, StudentName, GroupId}(sigma{Mark=:Mark}(Students nj Marks nj proj{CourseId}(sigma{LecturerId=:LecturerId}(Plan))))

print-sql
  SELECT StudentId, StudentName, GroupId
  FROM Students NATURAL JOIN Marks NATURAL JOIN (
    SELECT CourseId
    FROM Plan
    WHERE LecturerId=:LecturerId
  ) SEL1
  WHERE Mark=:Mark;

comment 03.6.  Которую вёл лектор, заданный ФИО
               (StudentId, StudentName, GroupId по :Mark, :LecturerName)

set-var :Mark = 5

set-var :LecturerName = 'Корнеев Г.А.'

print-ra proj{StudentId, StudentName, GroupId}(sigma{Mark=:Mark}(Students nj Marks nj proj{CourseId}(sigma{LecturerName=:LecturerName}(Lecturers) nj Plan)))

print-sql
  SELECT StudentId, StudentName, GroupId
  FROM (
    SELECT CourseId FROM Lecturers NATURAL JOIN Plan WHERE LecturerName=:LecturerName
  ) SEL1 NATURAL JOIN Marks NATURAL JOIN Students
  WHERE Mark=:Mark;

#####################################################################
subsection 04. Информацию о студентах не имеющих оценки по дисциплине

comment 04.1.  Среди всех студентов
               (StudentId, StudentName, GroupId по :CourseName)

set-var :CourseName = 'Базы данных'

print-ra Students ∖ proj{StudentId, StudentName, GroupId}(sigma{CourseName=:CourseName}(Courses nj Marks) nj Students)

print-sql
  SELECT * FROM Students
  EXCEPT
  SELECT DISTINCT StudentId, StudentName, GroupId
  FROM Courses NATURAL JOIN Marks NATURAL JOIN Students
  WHERE CourseName=:CourseName

comment 04.2.  Среди студентов, у которых есть эта дисциплина
               (StudentId, StudentName, GroupId по :CourseName)

set-var :CourseName = 'Базы данных'

print-ra proj{StudentId, StudentName, GroupId}(sigma{CourseName=:CourseName}(Students nj Plan nj Courses)) ∖ proj{StudentId, StudentName, GroupId}(sigma{CourseName=:CourseName}(Courses nj Marks) nj Students)

print-sql
  SELECT DISTINCT StudentId, StudentName, GroupId
  FROM Students NATURAL JOIN Plan NATURAL JOIN Courses
  WHERE CourseName=:CourseName
  EXCEPT
  SELECT DISTINCT StudentId, StudentName, GroupId
  FROM Students NATURAL JOIN Marks NATURAL JOIN Courses
  WHERE CourseName=:CourseName

############################################################
subsection 05. Для каждого студента ФИО и названия дисциплин

comment 05.1.  Которые у него есть по плану
               (StudentName, CourseName)

print-ra proj{StudentName, CourseName}(Students nj Plan nj Courses)

print-sql
  SELECT StudentName, CourseName
  FROM (
    SELECT DISTINCT GroupId, CourseName
    FROM Plan NATURAL JOIN Courses
  ) S1 NATURAL JOIN Students

comment 05.2.  Есть, но у него нет оценки
               (StudentName, CourseName)

print-ra proj{StudentName, CourseName}((proj{StudentId, CourseId}(Students nj Plan) ∖ proj{StudentId, CourseId}(Students nj Marks)) nj Students nj Courses)

print-sql
  SELECT StudentName, CourseName
  FROM (
    SELECT DISTINCT StudentId, CourseId
    FROM Students NATURAL JOIN Plan
    EXCEPT
    SELECT DISTINCT StudentId, CourseId
    FROM Students NATURAL JOIN Marks
  ) S1 NATURAL JOIN Students NATURAL JOIN Courses

comment 05.3.  Есть, но у него не 4 или 5
               (StudentName, CourseName)

comment print-ra proj{StudentName, CourseName}(sigma{Mark < 4}(Students nj Plan nj Marks) nj Courses)

print-ra proj{StudentName, CourseName}((proj{StudentId, CourseId}(Students nj Plan) ∖ proj{StudentId, CourseId}(sigma{Mark > 3}(Students nj Plan nj Marks))) nj Students nj Courses)

print-sql
  SELECT StudentName, CourseName
  FROM (
    SELECT DISTINCT StudentId, CourseId
    FROM Students NATURAL JOIN Plan
    EXCEPT
    SELECT DISTINCT StudentId, CourseId
    FROM Students NATURAL JOIN Marks
    WHERE Mark > 3
  ) S1 NATURAL JOIN Students NATURAL JOIN Courses

########################################################
subsection 06. Идентификаторы студентов по преподавателю

comment 06.1.  Имеющих хотя бы одну оценку у преподавателя
               (StudentId по :LecturerName)

set-var :LecturerName = 'Корнеев Г.А.'

print-ra proj{StudentId}(sigma{LecturerName=:LecturerName}(Students nj Plan nj Lecturers nj Marks))

print-sql
  SELECT DISTINCT StudentId
  FROM Students NATURAL JOIN Plan NATURAL JOIN Lecturers NATURAL JOIN Marks
  WHERE LecturerName=:LecturerName;

comment 06.2.  Не имеющих ни одной оценки у преподавателя
               (StudentId по :LecturerName)

set-var :LecturerName = 'Корнеев Г.А.'

print-ra proj{StudentId}(Students) ∖ proj{StudentId}(sigma{LecturerName=:LecturerName}(Students nj Plan nj Lecturers nj Marks))

print-sql
  SELECT DISTINCT StudentId
  FROM Students
  EXCEPT
  SELECT DISTINCT StudentId
  FROM Students NATURAL JOIN Plan NATURAL JOIN Lecturers NATURAL JOIN Marks
  WHERE LecturerName=:LecturerName;

comment 06.3.  Имеющих оценки по всем дисциплинам преподавателя
               (StudentId по :LecturerName)

set-var :LecturerName = 'Корнеев Г.А.'

print-ra proj{StudentId, CourseId}(Marks) div proj{CourseId}(sigma{LecturerName=:LecturerName}(Lecturers nj Plan))

comment Q is
print-sql
  SELECT DISTINCT StudentId, CourseId
  FROM Marks

comment S is
print-sql
  SELECT DISTINCT CourseId
  FROM Lecturers NATURAL JOIN Plan
  WHERE LecturerName=:LecturerName

print-sql
  SELECT DISTINCT StudentId
  FROM Marks
  EXCEPT
  SELECT DISTINCT StudentId
  FROM (
    SELECT * FROM (
      SELECT DISTINCT StudentId
      FROM Marks
    ) QprojX CROSS JOIN (
      SELECT DISTINCT CourseId
      FROM Lecturers NATURAL JOIN Plan
      WHERE LecturerName=:LecturerName
    ) S
    EXCEPT
    SELECT DISTINCT StudentId, CourseId
    FROM Marks
  ) SEL1;

comment 06.4.  Имеющих оценки по всем дисциплинам преподавателя,
               которые он вёл у этого студента
               (StudentId по :LecturerName)

set-var :LecturerName = 'Корнеев Г.А.'

print-ra proj{StudentId}(sigma{LecturerName=:LecturerName}(Students nj Plan nj Lecturers)) ∖ proj{StudentId}(proj{StudentId, CourseId}(sigma{LecturerName=:LecturerName}(Students nj Plan nj Lecturers)) ∖ proj{StudentId, CourseId}(Marks))

print-sql
  SELECT DISTINCT StudentId
  FROM Students NATURAL JOIN Plan NATURAL JOIN Lecturers
  WHERE LecturerName=:LecturerName
  EXCEPT
  SELECT DISTINCT StudentId
  FROM (
    SELECT DISTINCT StudentId, CourseId
    FROM Students NATURAL JOIN Plan NATURAL JOIN Lecturers
    WHERE LecturerName=:LecturerName
    EXCEPT
    SELECT DISTINCT StudentId, CourseId
    FROM Marks
  ) SEL1;

######################################################################################
subsection 07. Группы и дисциплины, такие что все студенты группы сдали эту дисциплину

comment 07.1.  Идентификаторы
               (GroupId, CourseId)

print-ra proj{StudentId, CourseId}(Marks) gdiv proj{StudentId, GroupId}(Students)

comment X is CourseId
        Y is StudentId
        Q is

print-sql
  SELECT DISTINCT StudentId, CourseId
  FROM Marks

comment Y is StudentId
        Z is GroupId
        S is

print-sql
  SELECT DISTINCT StudentId, GroupId
  FROM Students

comment Q great-div S is

print-sql
  SELECT *
  FROM (
    SELECT DISTINCT CourseId
    FROM Marks
  ) SEL1 CROSS JOIN (
    SELECT DISTINCT GroupId
    FROM Students
  ) SEL2
  EXCEPT
  SELECT DISTINCT CourseId, GroupId
  FROM (
    SELECT DISTINCT StudentId, CourseId, GroupId
    FROM (
      SELECT DISTINCT CourseId
      FROM Marks
    ) SEL3 CROSS JOIN (
      SELECT DISTINCT StudentId, GroupId
      FROM Students
    ) SEL4
    EXCEPT
    SELECT DISTINCT StudentId, CourseId, GroupId
    FROM (
      SELECT DISTINCT StudentId, CourseId
      FROM Marks
    ) SEL5 NATURAL JOIN (
      SELECT DISTINCT StudentId, GroupId
      FROM Students
    ) SEL6
  ) SEL7;

comment 07.2.  Названия
               (GroupName, CourseName)

print-ra proj{GroupName, CourseName}(proj{StudentId, CourseId}(Marks) gdiv proj{StudentId, GroupId}(Students) nj Groups nj Courses)

print-sql
  SELECT GroupName, CourseName
  FROM (
    SELECT *
    FROM (
      SELECT DISTINCT CourseId
      FROM Marks
    ) SEL1 CROSS JOIN (
      SELECT DISTINCT GroupId
      FROM Students
    ) SEL2
    EXCEPT
    SELECT DISTINCT CourseId, GroupId
    FROM (
      SELECT DISTINCT StudentId, CourseId, GroupId
      FROM (
        SELECT DISTINCT CourseId
        FROM Marks
      ) SEL3 CROSS JOIN (
        SELECT DISTINCT StudentId, GroupId
        FROM Students
      ) SEL4
      EXCEPT
      SELECT DISTINCT StudentId, CourseId, GroupId
      FROM (
        SELECT DISTINCT StudentId, CourseId
        FROM Marks
      ) SEL5 NATURAL JOIN (
        SELECT DISTINCT StudentId, GroupId
        FROM Students
      ) SEL6
    ) SEL7
  ) SEL8 NATURAL JOIN Groups NATURAL JOIN Courses;

###################################################
section Составьте SQL-запросы, позволяющие получать
###################################################

#############################
subsection 08. Суммарный балл

comment 08.1.  Одного студента
               (SumMark по :StudentId)

set-var :StudentId = 1

print-sql
  SELECT SUM(Mark) AS SumMark
  FROM Marks
  WHERE StudentId=:StudentId;

comment 08.2.  Каждого студента
               (StudentName, SumMark)

print-sql
  SELECT StudentName, SUM(Mark) AS SumMark
  FROM Students s LEFT JOIN Marks m ON s.StudentId = m.StudentId
  GROUP BY s.StudentId, StudentName;

comment 08.3.  Каждой группы
               (GroupName, SumMark)

print-sql
  SELECT GroupName, SumMark
  FROM Groups g LEFT JOIN (
    SELECT GroupId, SUM(Mark) AS SumMark
    FROM Marks NATURAL JOIN Students NATURAL JOIN Groups
    GROUP BY GroupId, GroupName
  ) SEL1 ON g.GroupId = SEL1.GroupId;

###########################
subsection 09. Средний балл

comment 09.1.  Одного студента
               (AvgMark по :StudentId)

set-var :StudentId = 1

print-sql
  SELECT AVG(CAST(Mark AS FLOAT)) AS AvgMark
  FROM Marks
  WHERE StudentId=:StudentId;

comment 09.2.  Каждого студента
               (StudentName, AvgMark)

print-sql
  SELECT StudentName, AVG(CAST(Mark AS FLOAT)) AS AvgMark
  FROM Students s LEFT JOIN Marks m ON s.StudentId = m.StudentId
  GROUP BY s.StudentId, StudentName;

comment 09.3.  Каждой группы
               (GroupName, AvgMark)

print-sql
  SELECT GroupName, AVG(CAST(Mark AS FLOAT)) AS AvgMark
  FROM Groups g LEFT JOIN (SELECT * FROM Marks NATURAL JOIN Students) m ON g.GroupId = m.GroupId
  GROUP BY g.GroupId, GroupName;

comment 09.4.  Средний балл средних баллов студентов каждой группы
               (GroupName, AvgAvgMark)

print-sql
  SELECT GroupName, AVG(CAST(AvgMark AS FLOAT)) AS AvgAvgMark
  FROM Groups g LEFT JOIN (
    SELECT StudentId, GroupId, AVG(CAST(Mark AS FLOAT)) AS AvgMark
    FROM Students NATURAL JOIN Marks
    GROUP BY StudentId, GroupId
  ) SEL1 ON g.GroupId = SEL1.GroupId
  GROUP BY g.GroupId, GroupName;

comment 10.  Для каждого студента:
             число дисциплин, которые у него были,
             число сданных дисциплин и
             число несданных дисциплин
             (StudentId, Total, Passed, Failed)

print-sql
  SELECT StudentId, Total, Passed, Total - Passed AS Failed
  FROM (
    SELECT StudentId, COUNT(CourseId) AS Total, COUNT(HasMark) AS Passed
    FROM (
      SELECT SEL1.StudentId, SEL1.CourseId, HasMark
      FROM (
        SELECT DISTINCT StudentId, CourseId
        FROM Students s LEFT JOIN Plan p
        ON s.GroupId = p.GroupId
      ) SEL1 LEFT JOIN (
        SELECT StudentId, CourseId, 1 AS HasMark
        FROM (
          SELECT DISTINCT StudentId, CourseId
          FROM Marks
        ) SEL3
      ) SEL2
      ON SEL1.StudentId = SEL2.StudentId and SEL1.CourseId = SEL2.CourseId
    ) SEL4
    GROUP BY StudentId
  ) SEL5;
