

##############
section Данные
##############

data Students
    StudentId, StudentName       , GroupId
    1        , 'Иванов И.И.'     , 1      
    2        , 'Петров П.П.'     , 1      
    3        , 'Петров П.П.'     , 2      
    4        , 'Сидров С.С.'     , 2      
    5        , 'Неизвестный Н.Н.', 3      
    6        , 'Безымянный Б.Б'  , 4      

data Groups
    GroupId, GroupName
    1      , 'M3435'  
    2      , 'M3439'  
    3      , 'M3238'  
    4      , 'M3239'  

data Courses
    CourseId, CourseName             
    1       , 'Базы данных'          
    2       , 'Управление проектами' 
    3       , 'ППО'                  
    4       , 'Теория информации'    
    6       , 'Математический анализ'
    7       , 'Технологии Java'      

data Lecturers
    LecturerId, LecturerName    
    1         , 'Корнеев Г.А.'  
    2         , 'Будин Н.А.'
    3         , 'Кузнецова Е.М.'
    4         , 'Киракозов А.Х.'
    6         , 'Трофимюк Г.А.' 
    7         , 'Беляев Е.А.' 
    8         , 'Кохась К.П.'   

data Plan
    GroupId, CourseId, LecturerId
    1      , 1       , 2         
    2      , 1       , 1         
    1      , 2       , 3         
    1      , 3       , 4         
    2      , 3       , 4         
    2      , 4       , 6         
    1      , 4       , 7         
    2      , 4       , 7         
    4      , 6       , 8         
    1      , 7       , 1         
    2      , 7       , 1         
    3      , 7       , 1         
    4      , 7       , 1         

data Marks
    StudentId, CourseId, Mark
    1        , 1       , 5   
    2        , 1       , 4   
    3        , 1       , 3   
    2        , 2       , 3   
    3        , 2       , 4   
    4        , 2       , 5   
    7        , 1       , 5   
    8        , 1       , 5   
    7        , 7       , 5   
    8        , 7       , 5   
    5        , 7       , 5   
    6        , 7       , 5   
    3        , 3       , 3   


####################################################
section Реализуйте указанные запросы, представления,
        проверки и триггеры на языке SQL.
####################################################

###################################################
subsection 1. Напишите запросы, удаляющие студентов

comment 1.1.  Учащихся в группе, заданной идентификатором
              (GroupId)

set-var :GroupId = 1

comment
print-sql
DELETE FROM Students
WHERE GroupId = :GroupId;
SELECT *
FROM Students NATURAL JOIN Groups;

comment 1.2.  Учащихся в группе, заданной названием
              (GroupName)

set-var :GroupName = 'M3439'

comment
print-sql
DELETE FROM Students
WHERE GroupId IN (SELECT GroupId FROM Groups WHERE GroupName = :GroupName);
SELECT *
FROM Students NATURAL JOIN Groups;

comment 1.3.  Без оценок

comment
print-sql
DELETE FROM Students
WHERE StudentId NOT IN (
  SELECT DISTINCT StudentId
  FROM Marks
);
SELECT *
FROM Students LEFT JOIN Marks;

comment 1.4.  Имеющих 3 и более оценки

comment
print-sql
DELETE FROM Students
WHERE StudentId IN (
  SELECT DISTINCT StudentId
  FROM Marks
  GROUP BY StudentId
  HAVING COUNT(Mark) >= 3
);
SELECT *
FROM Students NATURAL JOIN Marks;

comment 1.5.  Имеющих 3 и менее оценки

comment
print-sql
DELETE FROM Students
WHERE StudentId NOT IN (
  SELECT DISTINCT StudentId
  FROM Marks
  GROUP BY StudentId
  HAVING COUNT(Mark) > 3
);
SELECT *
FROM Students NATURAL JOIN Marks;

comment 1.6.  Студентов, c долгами (здесь и далее — по отсутствию оценки)

comment
print-sql
DELETE FROM Students
WHERE StudentId IN (
  SELECT DISTINCT StudentId
  FROM Students NATURAL JOIN Plan
  WHERE StudentId NOT IN (
    SELECT StudentId
    FROM Marks
    WHERE Marks.CourseId = Plan.CourseId
  )
);
SELECT * FROM Students NATURAL JOIN Plan NATURAL JOIN Marks;

comment 1.7.  Студентов, имеющих 2 и более долга

comment
print-sql
DELETE FROM Students
WHERE StudentId IN (
  SELECT StudentId
  FROM Students NATURAL JOIN Plan
  WHERE StudentId NOT IN (
    SELECT StudentId
    FROM Marks
    WHERE Marks.CourseId = Plan.CourseId
  )
  GROUP BY StudentId
  HAVING COUNT(DISTINCT CourseId) >= 2
);
SELECT * FROM Students NATURAL JOIN Plan NATURAL JOIN Marks;

comment 1.8.  Студентов, имеющих не более 2 долгов

comment
print-sql
DELETE FROM Students
WHERE StudentId NOT IN (
  SELECT StudentId
  FROM Students NATURAL JOIN Plan
  WHERE StudentId NOT IN (
    SELECT StudentId
    FROM Marks
    WHERE Marks.CourseId = Plan.CourseId
  )
  GROUP BY StudentId
  HAVING COUNT(DISTINCT CourseId) > 2
);
SELECT * FROM Students NATURAL JOIN Plan NATURAL JOIN Marks;

############################################################
subsection 2. Напишите запросы, обновляющие данные студентов

comment 2.1.  Изменение имени студента
              (StudentId, StudentName)

set-var :StudentId = 1

set-var :StudentName = 'Иванов И.И.'

comment
print-sql
UPDATE Students
SET StudentName = :StudentName
WHERE StudentId = :StudentId;
SELECT * FROM Students;

comment 2.2.  Перевод студента из группы в группу по индентификаторам
              (StudentId, GroupId, FromGroupId)

set-var :StudentId = 1

set-var :GroupId = 1

set-var :FromGroupId = 1

comment
print-sql
UPDATE Students
SET GroupId = :GroupId
WHERE StudentId = :StudentId AND GroupId = :FromGroupId;
SELECT * FROM Students;

comment 2.3.  Перевод всех студентов из группы в группу по идентификаторам
              (GroupId, FromGroupId)

set-var :GroupId = 1

set-var :FromGroupId = 1

print-sql
UPDATE Students
SET GroupId = :GroupId
WHERE GroupId = :FromGroupId;
SELECT * FROM Students;

comment 2.4.  Перевод студента из группы в группу по названиям
              (GroupName, FromGroupName)

set-var :GroupName = 'M3439'

set-var :FromGroupName = 'M3435'

comment
print-sql
UPDATE Students
SET GroupId = (SELECT GroupId FROM Groups WHERE GroupName = :GroupName)
WHERE :FromGroupName IN (
  SELECT GroupName
  FROM Groups
  WHERE Groups.GroupId = Students.GroupId
);
SELECT * FROM Students NATURAL JOIN Groups;

comment 2.5.  Перевод всех студентов из группы в группу,
              только если целевая группа существует
              (GroupName, FromGroupName)

set-var :GroupName = 'M3439'

set-var :FromGroupName = 'M3435'

print-sql
UPDATE Students
SET GroupId = (SELECT GroupId FROM Groups WHERE GroupName = :GroupName)
WHERE EXISTS (SELECT * FROM Groups WHERE GroupName = :GroupName) AND
  :FromGroupName IN (
    SELECT GroupName
    FROM Groups
    WHERE Groups.GroupId = Students.GroupId
  );
SELECT * FROM Students NATURAL JOIN Groups;

######################################################################
subsection 3. Напишите запросы, подсчитывающие статистику по студентам

comment 3.1.  Число оценок студента
              (столбец Students.Marks)
              (StudentId)

set-var :StudentId = 1

comment
print-sql
DELETE FROM Marks
WHERE StudentId = 6;
ALTER TABLE Students ADD Marks int;
UPDATE Students
SET Marks = (
  SELECT COUNT(CourseId)
  FROM Marks
  WHERE Marks.StudentId = Students.StudentId
)
WHERE StudentId = :StudentId;
SELECT * FROM Students;

comment 3.2.  Число оценок каждого студента
              (столбец Students.Marks)

comment
print-sql
ALTER TABLE Students ADD Marks int;
UPDATE Students
SET Marks = (
  SELECT COUNT(CourseId)
  FROM Marks
  WHERE Marks.StudentId = Students.StudentId
);
SELECT * FROM Students;

comment 3.3.  Пересчет числа оценок каждого студента
              по данным из таблицы NewMarks
              (столбец Students.Marks)

comment
print-sql
UPDATE Students
SET Marks = Marks + (
  SELECT COUNT(*)
  FROM NewMarks
  WHERE NewMarks.StudentId = Students.StudentId
);

comment 3.4.  Число сданных дисциплин каждого студента
              (столбец Students.Marks)

comment
print-sql
ALTER TABLE Students ADD Marks int;
UPDATE Students
SET Marks = (
  SELECT COUNT(DISTINCT CourseId)
  FROM Marks
  WHERE Marks.StudentId = Students.StudentId
);
SELECT * FROM Students;

comment 3.5.  Число долгов студента
              (столбец Students.Debts)
              (StudentId)

set-var :StudentId = 1

comment
print-sql
ALTER TABLE Students ADD Debts int;
UPDATE Students
SET Debts = (
  SELECT COUNT(DISTINCT CourseId)
  FROM Plan
  WHERE Students.GroupId = Plan.GroupId AND
    StudentId NOT IN (
      SELECT StudentId
      FROM Marks
      WHERE Plan.CourseId = Marks.CourseId
    )
)
WHERE StudentId = :StudentId;
SELECT * FROM Students;

comment 3.6.  Число долгов каждого студента
              (столбец Students.Debts)

comment
print-sql
ALTER TABLE Students ADD Debts int;
UPDATE Students
SET Debts = (
  SELECT COUNT(DISTINCT CourseId)
  FROM Plan
  WHERE Students.GroupId = Plan.GroupId AND
    StudentId NOT IN (
      SELECT StudentId
      FROM Marks
      WHERE Plan.CourseId = Marks.CourseId
    )
);
SELECT * FROM Students;

comment 3.7.  Число долгов каждого студента группы (столбец Students.Debts)
              (GroupName)

set-var :GroupName = 'M3439'

comment
print-sql
ALTER TABLE Students ADD Debts int;
UPDATE Students
SET Debts = (
  SELECT COUNT(DISTINCT CourseId)
  FROM Plan
  WHERE Students.GroupId = Plan.GroupId AND
    StudentId NOT IN (
      SELECT StudentId
      FROM Marks
      WHERE Plan.CourseId = Marks.CourseId
    )
)
WHERE GroupId IN (SELECT GroupId FROM Groups WHERE GroupName = :GroupName);
SELECT * FROM Students;

comment 3.8.  Число оценок и долгов каждого студента
              (столбцы Students.Marks, Students.Debts)

comment
print-sql
ALTER TABLE Students ADD Marks int;
ALTER TABLE Students ADD Debts int;
UPDATE Students
SET Marks = (
  SELECT COUNT(CourseId)
  FROM Marks
  WHERE Marks.StudentId = Students.StudentId
),
Debts = (
  SELECT COUNT(DISTINCT CourseId)
  FROM Plan
  WHERE Students.GroupId = Plan.GroupId AND
    StudentId NOT IN (
      SELECT StudentId
      FROM Marks
      WHERE Plan.CourseId = Marks.CourseId
    )
);
SELECT * FROM Students;

###########################################################
subsection 4. Напишите запросы, обновляющие оценки,
              с учетом данных из таблицы NewMarks,
              имеющей такую же структуру, как таблица Marks

comment 4.1.  Проставляющий новую оценку только если ранее оценки не было

data NewMarks
  StudentId, CourseId, Mark
  1        , 3       , 4   
  2        , 2       , 5   
  2        , 3       , 3   
  3        , 2       , 3   
  3        , 7       , 2   

comment
print-sql
INSERT INTO Marks
SELECT *
FROM NewMarks
WHERE CourseId NOT IN (
  SELECT CourseId
  FROM Marks
  WHERE Marks.StudentId = NewMarks.StudentId
);
SELECT * FROM Marks ORDER BY StudentId ASC, CourseId ASC;

comment 4.2.  Проставляющий новую оценку только если ранее оценка была

comment
print-sql
UPDATE Marks
SET Mark = (
  SELECT Mark
  FROM NewMarks
  WHERE NewMarks.StudentId = Marks.StudentId AND
    NewMarks.CourseId = Marks.CourseId
)
WHERE EXISTS (
  SELECT *
  FROM NewMarks
  WHERE NewMarks.StudentId = Marks.StudentId AND
    NewMarks.CourseId = Marks.CourseId
);
SELECT * FROM Marks ORDER BY StudentId ASC, CourseId ASC;

comment 4.3.  Проставляющий максимум из старой и новой оценки
              только если ранее оценка была

comment
print-sql
UPDATE Marks
SET Mark = (
  SELECT Mark
  FROM NewMarks
  WHERE NewMarks.StudentId = Marks.StudentId AND
    NewMarks.CourseId = Marks.CourseId
)
WHERE EXISTS (
  SELECT *
  FROM NewMarks
  WHERE NewMarks.StudentId = Marks.StudentId AND
    NewMarks.CourseId = Marks.CourseId AND
    NewMarks.Mark > Marks.Mark
);
SELECT * FROM Marks ORDER BY StudentId ASC, CourseId ASC;

comment 4.4.  Проставляющий максимум из старой и новой оценки
              (если ранее оценки не было, то новую оценку)

comment
print-sql
MERGE INTO Marks m
USING NewMarks nm
ON m.StudentId = nm.StudentId AND
  m.CourseId = nm.CourseId
WHEN MATCHED AND nm.Mark > m.Mark THEN
  UPDATE SET Mark = nm.Mark
WHEN NOT MATCHED THEN
  INSERT (StudentId, CourseId, Mark)
  VALUES (nm.StudentId, nm.CourseId, nm.Mark);
SELECT * FROM Marks ORDER BY StudentId ASC, CourseId ASC;

######################################
subsection 5. Работа с представлениями

comment 5.1.  Создайте представление StudentMarks в котором
              для каждого студента указано число оценок
              (StudentId, Marks)

print-sql
CREATE VIEW StudentMarks(StudentId, Marks) AS
SELECT Students.StudentId, COUNT(Mark) AS Marks
FROM Students LEFT JOIN Marks
ON Students.StudentId = Marks.StudentId
GROUP BY Students.StudentId;
SELECT * FROM StudentMarks;

comment 5.2.  Создайте представление AllMarks в котором
              для каждого студента указано число оценок,
              включая оценки из таблицы NewMarks
              (StudentId, Marks)

print-sql
CREATE VIEW AllMarks(StudentId, Marks) AS
SELECT Students.StudentId, COUNT(Mark) AS Marks
FROM Students LEFT JOIN
  (SELECT * FROM Marks UNION ALL SELECT * FROM NewMarks) allmarks
ON Students.StudentId = allmarks.StudentId
GROUP BY Students.StudentId;
SELECT * FROM AllMarks;

comment 5.3.  Создайте представление Debts в котором для каждого
              студента, имеющего долги указано их число
              (StudentId, Debts)

print-sql
CREATE VIEW Debts(StudentId, Debts) AS
SELECT StudentId, COUNT(DISTINCT CourseId) AS Debts
FROM Students NATURAL JOIN Plan
WHERE StudentId NOT IN (
  SELECT StudentId
  FROM Marks
  WHERE Marks.CourseId = Plan.CourseId
)
GROUP BY StudentId;
SELECT * FROM Debts;

comment 5.4.  Создайте представление StudentDebts в котором
              для каждого студента указано число долгов
              (StudentId, Debts)

print-sql
CREATE VIEW StudentDebts(StudentId, Debts) AS
SELECT Students.StudentId, COUNT(DISTINCT CourseId) AS Debts
FROM Students LEFT JOIN (
  SELECT StudentId, CourseId
  FROM Students NATURAL JOIN Plan
  WHERE StudentId NOT IN (
    SELECT StudentId
    FROM Marks
    WHERE Marks.CourseId = Plan.CourseId
  )
) indebted
ON Students.StudentId = indebted.StudentId
GROUP BY Students.StudentId;
SELECT * FROM StudentDebts;

#############################################################
subsection 6. Целостность данных.
              .
              Обратите внимание, что задания из этого раздела
              надо посылать в PCMS, но они будут проверяться
              только вручную после окончания сдачи.
              То есть в PCMS вы получите + за любое решение.
              .
              В комментарии перед запросом укажите версию
              использованной СУБД.

comment 6.1.  Добавьте проверку того, что у студентов есть оценки
              только по дисциплинам из их плана (NoExtraMarks)
              (StudentId, CourseId)

comment
print-sql
CREATE ASSERTION NoExtraMarks CHECK (
  NOT EXISTS (
    SELECT *
    FROM Marks
    WHERE CourseId NOT IN (
      SELECT CourseId
      FROM Plan NATURAL JOIN Students
      WHERE StudentId = Marks.StudentId
    )
  )
);

comment 6.2.  Добавьте проверку того, что все студенты каждой группы
              имею оценку по одному и тому же набору дисциплин (SameMarks).
              (StudentId)

comment
print-sql
CREATE ASSERTION SameMarks CHECK (
  NOT EXISTS (
    SELECT *
    FROM (
      SELECT StudentId, COUNT(DISTINCT CourseId) AS cnt1
      FROM Marks
      GROUP BY StudentId
    ) NATURAL JOIN Students NATURAL JOIN (
      SELECT GroupId, COUNT(DISTINCT CourseId) AS cnt2
      FROM Marks NATURAL JOIN Students
      GROUP BY GroupId
    )
    WHERE cnt1 != cnt2
  )
);

comment 6.3.  Создайте триггер PreserveMarks,
              не позволяющий уменьшить оценку студента по дисциплине.
              При попытке такого изменения оценка изменяться не должна.
              (StudentId)

comment
print-sql
CREATE TRIGGER PreserveMarks
ON Marks
BEFORE UPDATE
FOR EACH ROW
BEGIN
  IF NEW.Mark < OLD.Mark THEN
  SIGNAL SQLSTATE '02000' SET MESSAGE_TEXT = 'Attempt of mark preserving';
  END IF;
END;
